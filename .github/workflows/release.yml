name: Build and Release

on:
  workflow_dispatch:
  push:
    branches:
      - master
    paths:
      - "**/*.go"
      - "go.mod"
      - "go.sum"
      - ".github/workflows/*.yml"
  pull_request:
    types: [ opened, synchronize, reopened ]
    paths:
      - "**/*.go"
      - "go.mod"
      - "go.sum"
      - ".github/workflows/*.yml"
  release:
    types: [ published ]

jobs:

  build:
    strategy:
      matrix:
        goos: [ windows, freebsd, openbsd, linux, darwin ]
        goarch: [ amd64, 386 ]
        exclude:
          - goarch: 386
            goos: darwin
          - goarch: 386
            goos: openbsd
        include:
          - goos: darwin
            goarch: arm64
          - goos: linux
            goarch: arm
            goarm: 7
          - goos: linux
            goarch: arm
            goarm: 6
          - goos: linux
            goarch: arm
            goarm: 5
          - goos: android
            goarch: arm64
          - goos: linux
            goarch: arm64
          - goos: linux
            goarch: riscv64
          - goos: linux
            goarch: mips64
          - goos: linux
            goarch: mips64le
          - goos: linux
            goarch: mipsle
          - goos: linux
            goarch: mips
          - goos: linux
            goarch: ppc64le
          - goos: freebsd
            goarch: arm64
          - goos: freebsd
            goarch: arm
            goarm: 7
          - goos: linux
            goarch: s390x
      fail-fast: false

    runs-on: ubuntu-latest
    env:
      GOOS: ${{ matrix.goos }}
      GOARCH: ${{ matrix.goarch }}
      GOARM: ${{ matrix.goarm }}
      CGO_ENABLED: 0
    steps:
      - name: Checkout codebase
        uses: actions/checkout@v3

      - name: Show workflow information
        id: get_filename
        run: |
          export _NAME=$(jq ".[\"$GOOS-$GOARCH$GOARM$GOMIPS\"].friendlyName" -r < .github/build/friendly-filenames.json)
          echo "GOOS: $GOOS, GOARCH: $GOARCH, GOARM: $GOARM, GOMIPS: $GOMIPS, RELEASE_NAME: $_NAME"
          echo "ASSET_NAME=$_NAME" >> $GITHUB_OUTPUT
          echo "ASSET_NAME=$_NAME" >> $GITHUB_ENV

      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: '^1.21'

      - name: Get project dependencies
        run: go mod download

      - name: Build XrayR
        run: |
          mkdir -p build_assets
          go build -v -o build_assets/XrayR -trimpath -ldflags "-s -w -buildid="

      - name: Build Mips softfloat XrayR
        if: matrix.goarch == 'mips' || matrix.goarch == 'mipsle'
        run: |
          GOMIPS=softfloat go build -v -o build_assets/XrayR_softfloat -trimpath -ldflags "-s -w -buildid="

      - name: Rename Windows XrayR
        if: matrix.goos == 'windows'
        run: |
          cd ./build_assets || exit 1
          mv XrayR XrayR.exe

      - name: Prepare to release
        uses: nick-fields/retry@v3
        with:
          timeout_minutes: 60
          retry_wait_seconds: 60
          max_attempts: 5
          command: |
            cp ${GITHUB_WORKSPACE}/README.md ./build_assets/README.md
            cp ${GITHUB_WORKSPACE}/LICENSE ./build_assets/LICENSE
            cp ${GITHUB_WORKSPACE}/release/config/dns.json ./build_assets/dns.json
            cp ${GITHUB_WORKSPACE}/release/config/route.json ./build_assets/route.json
            cp ${GITHUB_WORKSPACE}/release/config/custom_outbound.json ./build_assets/custom_outbound.json
            cp ${GITHUB_WORKSPACE}/release/config/custom_inbound.json ./build_assets/custom_inbound.json
            cp ${GITHUB_WORKSPACE}/release/config/rulelist ./build_assets/rulelist
            cp ${GITHUB_WORKSPACE}/release/config/config.yml.example ./build_assets/config.yml
            LIST=('geoip' 'geosite')
            for i in "${LIST[@]}"
            do
              DOWNLOAD_URL="https://raw.githubusercontent.com/Loyalsoldier/v2ray-rules-dat/release/${i}.dat"
              FILE_NAME="${i}.dat"
              echo -e "Downloading ${DOWNLOAD_URL}..."
              curl -L "${DOWNLOAD_URL}" -o ./build_assets/${FILE_NAME}
            done

      - name: Create ZIP archive
        shell: bash
        run: |
          pushd build_assets || exit 1
          touch -mt $(date +%Y01010000) *
          zip -9vr ../XrayR-$ASSET_NAME.zip .
          popd || exit 1
          FILE=./XrayR-$ASSET_NAME.zip
          DGST=$FILE.dgst
          for METHOD in {"md5","sha1","sha256","sha512"}
          do
            openssl dgst -$METHOD $FILE | sed 's/([^)]*)//g' >>$DGST
          done

      - name: Change the name
        run: |
          mv build_assets XrayR-$ASSET_NAME

      - name: Upload files to Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: XrayR-${{ steps.get_filename.outputs.ASSET_NAME }}-${{ matrix.goos }}-${{ matrix.goarch }}${{ matrix.goarm }}
          path: |
            ./XrayR-${{ steps.get_filename.outputs.ASSET_NAME }}/*
          # include-hidden-files: true